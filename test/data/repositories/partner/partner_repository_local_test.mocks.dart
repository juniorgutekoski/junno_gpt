// Mocks generated by Mockito 5.4.4 from annotations
// in junno_app/test/data/repositories/partner/partner_repository_local_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:junno_app/src/data/services/local/partner/partner_service.dart'
    as _i2;
import 'package:junno_app/src/domain/models/partner/partner.dart' as _i4;
import 'package:junno_app/utils/filter.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PartnerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartnerService extends _i1.Mock implements _i2.PartnerService {
  @override
  _i3.Future<int> createPartner(_i4.Partner? partner) => (super.noSuchMethod(
        Invocation.method(
          #createPartner,
          [partner],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> deletePartner(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePartner,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Partner>> getPartners(
          {required _i5.FilterCustom? filter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPartners,
          [],
          {#filter: filter},
        ),
        returnValue: _i3.Future<List<_i4.Partner>>.value(<_i4.Partner>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Partner>>.value(<_i4.Partner>[]),
      ) as _i3.Future<List<_i4.Partner>>);

  @override
  _i3.Future<bool> updatePartner(
    int? id,
    Map<String, dynamic>? partnerMap,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePartner,
          [
            id,
            partnerMap,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
